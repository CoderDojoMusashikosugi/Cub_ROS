# ここに全体共通の設定を書く

x-template: &cub_ros_common_setting # デフォルト設定。この値は下にあるカスタム設定で上書きされる場合があるので、編集時はそちらにも注目すべし。
  build:
    context: ..
    network: host
    dockerfile: docker/Dockerfile
    args:
      - BASE_IMAGE_NAME=ghcr.io/coderdojomusashikosugi/cub_ros_base:${CONFIG_BASE_IMAGE_VERSION:-latest}_${CONFIG_IMAGE_TYPE:-default}_${ARCH:-default}
      - ADDITIONAL_PKGS=${CONFIG_ADDITIONAL_PKGS:-}
  image: ghcr.io/coderdojomusashikosugi/cub_ros:${CONFIG_IMAGE_VERSION:-latest}_${CONFIG_IMAGE_TYPE:-default}_${ARCH:-default} # dockerにイメージ名:タグ名を付ける
  container_name: cub_ros      # コンテナ名を付ける
  hostname: docker             # ホスト名を付ける。内部のシェルを起動した際のプロンプトに影響する。
  stdin_open: true             # docker compose upでコンテナ立ち上げっぱなしにする用
  tty: true                    # docker compose upでコンテナ立ち上げっぱなしにする用
  entrypoint: /entrypoint.sh   # コンテナ起動時に最初に実行されるスクリプトの設定
  ipc: host                    # コンテナとホストとのDDSの通信のためにホストとIPCを共有
  privileged: true             # ホストのシリアルポートをコンテナに持ってくる
  network_mode: "host"         # ネットワーク関連のアプリを、コンテナ内でもホストと同じ動きが出来るようにする。
  shm_size: "1024m"
  group_add: 
    - dialout                  # シリアルポートをsudo無しでアクセス可能にする
    - ${INPUT_GROUP_ID:-input} # joystickをsudo無しでアクセス可能にする
    - plugdev
    - root                     # 上のmac版
    - video
  extra_hosts:
    - "docker:127.0.0.1"       # ホスト名とlocalhostを対応付けておく。sudoのエラーを消す用。
  volumes:                                                   # ホストにあるディレクトリをコンテナ内部から読み書き出来るようマウントする
    - ./home:/home/${USER_NAME:-cub}                         # docker/homeに置いているhomeディレクトリをまるごとコンテナ内と接続する
    - ../ros:/home/${USER_NAME:-cub}/colcon_ws/src/cub       # ./rosに置いたrosパッケージを、cubという名前でコンテナ内に配置する
    - ../support_tools:/home/${USER_NAME:-cub}/support_tools # ./support_toolsに置いているフォルダ/ファイルをsupport_toolsという名前でコンテナ内に配置する
    - /var/run/docker.sock:/var/run/docker.sock              # Hostのdockerをコンテナ内から操作可能にする
    - /dev:/dev                                              # USB-シリアルデバイス等をコンテナ内から操作可能にする
    - /etc/localtime:/etc/localtime:ro                       # ホストのタイムゾーンをコンテナと共有する
    - /etc/timezone:/etc/timezone:ro                         # ホストのタイムゾーン情報をコンテナと共有する
    - /run/udev:/run/udev:ro   # handy1のraspi camera向け https://qiita.com/SSS-ryotamurakami/items/1208d9fe996c8177c3a7
  working_dir: /home/${USER_NAME:-cub} # シェル起動時はホームディレクトリから開始
  environment:                    # コンテナ内で使う環境変数の設定
    # ユーザー設定関連
    - HOST_UID                    # コンテナ内で使うユーザーのuid受け渡し用。値の定義はrun.shにある。
    - HOST_GID                    # コンテナ内で使うユーザーのgid受け渡し用。値の定義はrun.shにある。
    - USER_NAME=${USER_NAME:-cub} # コンテナ内で使うユーザー名(&パスワード)。値の定義はdocker/.envにある。
    - DISPLAY                     # X11用の設定。値の定義はホスト環境のもの、Macだけrun.shにある。
    - CUB_TARGET                  # どの機体向けに実行するかの設置を読み込む。値の定義はtarget.envにある。
    - INPUT_GROUP_ID              # inputグループをdockerコンテナ内に共有する用の設定。値の定義はdocker/internal/docker_util.shにある。
  device_cgroup_rules:
    - 'c 81:* rmw'
    - 'c 189:* rmw'

services:
  cub_ros:
    <<: *cub_ros_common_setting

  cub_ros_vnc:
    <<: *cub_ros_common_setting

  cub_ros_base: # rosだけ入ってる分のコンテナイメージ生成用
    build:
      context: ..
      dockerfile: docker/Dockerfile.base
      network: host
      args:
        - BASE_IMAGE=${CONFIG_BASE_IMAGE:-nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04}
        - CONTAINER_INSTALL_SCRIPTS=${CONFIG_CONTAINER_INSTALL_SCRIPTS}
    network_mode: "none"
    image: ghcr.io/coderdojomusashikosugi/cub_ros_base:${CONFIG_BASE_IMAGE_VERSION:-latest}_${CONFIG_IMAGE_TYPE:-default}_${ARCH:-default} # dockerにイメージ名:タグ名を付ける
